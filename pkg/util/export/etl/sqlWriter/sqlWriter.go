// Copyright 2022 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sqlWriter

import (
	"context"
	"database/sql"
	"encoding/csv"
	"encoding/json"
	"fmt"
	"strings"

	_ "github.com/go-sql-driver/mysql"
	"github.com/matrixorigin/matrixone/pkg/util/export/table"
)

var _ SqlWriter = (*BaseSqlWriter)(nil)

// SqlWriter is a writer that writes data to a SQL database.
type BaseSqlWriter struct {
	db           *sql.DB
	dsn          string
	forceNewConn bool
	ctx          context.Context
}

type SqlWriter interface {
	table.RowWriter
	WriteRows(rows string, tbl *table.Table) (int, error)
}

func (sw *BaseSqlWriter) GetContent() string {
	return ""
}
func (sw *BaseSqlWriter) WriteRow(row *table.Row) error {
	return nil
}

func jsonEscape(i string) string {
	b, err := json.Marshal(i)
	if err != nil {
		panic(err)
	}
	s := string(b)
	return s[1 : len(s)-1]
}

func (sw *BaseSqlWriter) generateInsertStatement(rows string, tbl *table.Table) (string, int, error) {

	sb := strings.Builder{}
	sb.WriteString("INSERT INTO")
	sb.WriteString(" `" + tbl.Database + "`." + tbl.Table + " ")

	// write columns
	sb.WriteString("(")
	for i, col := range tbl.Columns {
		if i != 0 {
			sb.WriteString(",")
		}
		sb.WriteString("`" + col.Name + "`")
	}
	sb.WriteString(") ")

	// write values
	r := csv.NewReader(strings.NewReader(rows))
	records, err := r.ReadAll()
	if err != nil {
		return "", 0, err
	}
	sb.WriteString("VALUES ")
	// Generated by copilot...
	for idx, row := range records {
		if len(row) == 0 {
			continue
		}
		sb.WriteString("(")
		for i, field := range row {
			if i != 0 {
				sb.WriteString(",")
			}
			if tbl.Columns[i].ColType == table.TJson {
				res := strings.ReplaceAll(jsonEscape(field), "'", "\\'")
				sb.WriteString("'" + res + "'")
			} else {
				// escape single quote
				res := strings.ReplaceAll(field, "'", "\\'")
				sb.WriteString("'" + res + "'")
			}
		}
		if idx == len(records)-1 {
			sb.WriteString(");")
		} else {
			sb.WriteString("),\n")
		}
	}
	return sb.String(), len(records), nil
}

func (sw *BaseSqlWriter) WriteRows(rows string, tbl *table.Table) (int, error) {
	db, err := sw.initOrRefreshDBConn()
	if err != nil {
		return 0, err
	}
	insertStatement, cnt, err := sw.generateInsertStatement(rows, tbl)
	if err != nil {
		return 0, err
	}
	if cnt == 0 {
		return cnt, nil
	}

	_, err = db.Exec(insertStatement)
	if err != nil {
		return cnt, nil
	}
	return 0, err

}

func (sw *BaseSqlWriter) FlushAndClose() (int, error) {
	return 0, sw.db.Close()
}

func (sw *BaseSqlWriter) initOrRefreshDBConn() (*sql.DB, error) {
	if sw.db == nil {
		dbUser, _ := GetSQLWriterDBUser()
		if dbUser == nil {
			return nil, errNotReady
		}

		addressFunc := GetSQLWriterDBAddressFunc()
		if addressFunc == nil {
			return nil, errNotReady
		}
		dbAddress, err := addressFunc(context.Background())
		if err != nil {
			return nil, err
		}
		dsn :=
			fmt.Sprintf("%s:%s@tcp(%s)/?readTimeout=15s&writeTimeout=15s&timeout=15s",
				dbUser.UserName,
				dbUser.Password,
				dbAddress)
		db, err := sql.Open("mysql", dsn)
		if err != nil {
			return nil, err
		}
		sw.db = db
		sw.dsn = dsn
	}
	if err := sw.db.Ping(); err != nil {
		if sw.forceNewConn {
			db, err := sql.Open("mysql", sw.dsn)
			if err != nil {
				return nil, err
			}
			sw.db = db
		} else {
			return nil, err
		}
	}
	return sw.db, nil
}
